{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"jsa-sortarray-javascript": {
		"prefix": "jsa-sortarray-javascript",
		"body": [
			"${1:Array}.sort(function (a, b) {\r",
			"    return a === b ? 0 : a ${2:MaiorOuMenor} b ? -1 : 1;\r",
			"});"
		],
		"description": "Ordenar Array, use < ou >"
	},
	"jsa-expressionifternario-react": {
		"prefix": "jsa-expressionifternario-react",
		"body": "{${1:Condition} ? ${2:ResultTrue} : ${3:ResultFalse}}",
		"description": "Criar if ternário"
	},
	"jsa-expressionparenteses-react": {
		"prefix": "jsa-expressionparenteses-react",
		"body": [
			"{${1:VariableName} ? (\r",
			"    <${2:ComponentName} />\r",
			"    ) \r",
			"    : \r",
			"    (\r",
			"    <${2:ComponentName} />\r",
			")}"
		],
		"description": "Criar expressão condicional com parenteses"
	},
	"jsa-createmap-react": {
		"prefix": "jsa-createmap-react",
		"body": [
			"{${1:Array}.map((${2:NameVariable}) => (\r",
			"    <${4:TagName}>{${2:NameVariable}.${3:PropName}}</${4:TagName}>\r",
			"))}"
		],
		"description": "Criar renderização condicional com Map"
	},
	"jsa-expression&&-react": {
		"prefix": "jsa-expression&&-react",
		"body": [
			"{!${1:NameVariable} && (\r",
			"    <${2:TagName}>\r",
			"        \r",
			"    </${2:TagName}>\r",
			")}"
		],
		"description": "Criar expressão lógica com &&"
	},
	"jsa-component-arrowfunction": {
		"prefix": "jsa-component-arrowfunction",
		"body": [
			"interface ${1:Name} {\r",
			"\r",
			"};\r",
			"\r",
			"type ${1:Name}Props = {\r",
			"\r",
			"};\r",
			"\r",
			"export const ${1:Name} = () => {\r",
			"    return (\r",
			"        <div></div>\r",
			"    )\r",
			"};"
		],
		"description": "Cria componente usando arrow funtion e tipagem"
	},
	"jsa-component-function": {
		"prefix": "jsa-component-function",
		"body": [
			"interface ${1:Name} {\r",
			"\r",
			"};\r",
			"\r",
			"type ${1:Name}Props = {\r",
			"\r",
			"};\r",
			"\r",
			"export default function ${1:Name}() {\r",
			"    return (\r",
			"        <div></div>\r",
			"    )\r",
			"};"
		],
		"description": "Cria um componente react com tipagem"
	},
	"jsa-root-layout": {
		"prefix": "jsa-root-layout",
		"body": [
			"import type { Metadata } from \"next\";\r",
			"import { Inter } from \"next/font/google\";\r",
			"import \"./globals.css\";\r",
			"\r",
			"const inter = Inter({ subsets: [\"latin\"] });\r",
			"\r",
			"export const metadata: Metadata = {\r",
			"  title: \"Create Next App\",\r",
			"  description: \"Generated by create next app\",\r",
			"};\r",
			"\r",
			"export default function ${1:Name}Layout({\r",
			"  children,\r",
			"}: Readonly<{\r",
			"  children: React.ReactNode;\r",
			"}>) {\r",
			"  return (\r",
			"    <html lang=\"pt-Br\">\r",
			"      <body>{children}</body>\r",
			"    </html>\r",
			"  );\r",
			"}"
		],
		"description": "Criaçao de root layout aplicativo Next"
	},
	"jsa-styled-components": {
		"prefix": "jsa-styled-components",
		"body": [
			"export const ${1:NameComponents} = styled.${2:Tag}`\r",
			"    ${3:Estilo}\r",
			"`;"
		],
		"description": "Criar um estilo via styled components"
	},
	"jsa-media-querie": {
		"prefix": "jsa-media-querie",
		"body": [
			"@media(min-width: ${1:Size}px) and (max-width: ${2:Size}px){\r",
			"            ${3:Property}\r",
			"}"
		],
		"description": "Criar uma media querie"
	},
	"jsa-useeffect-react": {
		"prefix": "jsa-useeffect-react",
		"body": [
			"useEffect(() => {\r",
			"        console.log(\"Hello world\");\r",
			"        return () => {\r",
			"            console.clear();\r",
			"        };\r",
			"    }, []);"
		],
		"description": "Criar um use effect em react"
	},
	"jsa-console": {
		"prefix": "jsa-console",
		"body": "console.log(${1:Flag}, ${2:Variable});",
		"description": "Criar um console log"
	},
	"jsa-console-color": {
		"prefix": "jsa-console-color",
		"body": "console.log(`\\x1b[42m ${${1:variable}} \\x1b[0m`);",
		"description": "Criar um console log colorido em verde"
	},
	"jsa-classname-module": {
		"prefix": "jsa-class-css-module",
		"body": "className={style.${1:Name}}",
		"description": "Criar um classname para uma tag html via css module"
	},
	"jsa-fetch": {
		"prefix": "jsa-fetch",
		"body": [
			"fetch('${1:url}', {\r",
			"    method: 'POST',\r",
			"    headers: {\r",
			"      'Content-Type': 'application/json',\r",
			"      Authorization: `Bearer ${2:token}`,\r",
			"    },\r",
			"    cache: 'no-cache',\r",
			"    body: JSON.stringify({\r",
			"      title: 'foo',\r",
			"      body: 'bar',\r",
			"      userId: 1,\r",
			"    }),\r",
			"  })\r",
			"    .then(response => response.json())\r",
			"    .then(data => console.log(data))\r",
			"    .catch(error => console.error('Error fetching data:', error))\r",
			"    .finally(() => console.log('Fetch operation completed'));"
		],
		"description": "Realizar uma requisição fetch com tratamento de erro e finalização"
	},
	"jsa-fetch-async": {
		"prefix": "jsa-fetch-async",
		"body": [
			"try {\r",
			"    const response = await fetch('${1:url}', {\r",
			"      method: 'POST',\r",
			"      headers: {\r",
			"        'Content-Type': 'application/json',\r",
			"        Authorization: `Bearer ${2:token}`,\r",
			"      },\r",
			"      cache: 'no-cache',\r",
			"      body: JSON.stringify({\r",
			"        title: 'foo',\r",
			"        body: 'bar',\r",
			"        userId: 1,\r",
			"      }),\r",
			"    });\r",
			"\r",
			"    if (!response.ok) {\r",
			"      throw new Error('Network response was not ok');\r",
			"    }\r",
			"\r",
			"    const data = await response.json();\r",
			"    console.log(data);\r",
			"  } catch (error) {\r",
			"    console.error('Error fetching data:', error);\r",
			"  } finally {\r",
			"    console.log('Fetch operation completed');\r",
			"  }"
		],
		"description": "Realizar fetch com uso de async e await"
	},
	"jsa-reduce": {
		"prefix": "jsa-reduce",
		"body": [
			"${1:list}.reduce((acc, current) => {\r",
			"  if (current % 2 === 0) {\r",
			"    return acc + current;\r",
			"  }\r",
			"  return acc;\r",
			"}, ${2:initialValue});"
		],
		"description": "Criar um reduce em javascript, use o nome da lista como prefixo"
	},
	"jsa-console-time": {
		"prefix": "jsa-console-time",
		"body": [
			"console.time('${1:message}');\r",
			"// Código que leva algum tempo para ser executado\r",
			"console.timeEnd('${1:message}');"
		],
		"description": "Medir tempo de execução de um código"
	},
	"jsa-axios-create": {
		"prefix": "jsa-axios-create",
		"body": [
			"const api = axios.create({\r",
			"  baseURL: '${1:url}',\r",
			"  headers: {\r",
			"    'Content-Type': 'application/json',\r",
			"  },\r",
			"});"
		],
		"description": "Criar a configuração básica do Axios"
	},
	"jsa-axios-interceptor": {
		"prefix": "jsa-axios-interceptor",
		"body": [
			"api.interceptors.request.use(config => {\r",
			"  const token = '${1:token}'; // você pode buscar do localStorage ou outro lugar\r",
			"  if (token) {\r",
			"    config.headers.Authorization = `Bearer ${token}`;\r",
			"  }\r",
			"  return config;\r",
			"});\r",
			"\r",
			"export default api;"
		],
		"description": "Interceptor para incluir token automaticamente"
	},
	"jsa-axios-get": {
		"prefix": "jsa-axios-get",
		"body": [
			"export const getRequest = async <T>(url: string): Promise<T> => {\r",
			"  const response = await api.get<T>(url);\r",
			"  return response.data;\r",
			"};"
		],
		"description": "Realizar get com axios"
	},
	"jsa-axios-post": {
		"prefix": "jsa-axios-post",
		"body": [
			"export const postRequest = async <T, U = unknown>(\r",
			"  url: string,\r",
			"  data: U\r",
			"): Promise<T> => {\r",
			"  const response = await api.post<T>(url, data);\r",
			"  return response.data;\r",
			"};"
		],
		"description": "Realizar post com axios"
	},
	"jsa-axios-put": {
		"prefix": "jsa-axios-put",
		"body": [
			"export const putRequest = async <T, U = unknown>(\r",
			"  url: string,\r",
			"  data: U\r",
			"): Promise<T> => {\r",
			"  const response = await api.put<T>(url, data);\r",
			"  return response.data;\r",
			"};"
		],
		"description": "Realizar um put com axios"
	},
	"jsa-axios-patch": {
		"prefix": "jsa-axios-patch",
		"body": [
			"export const patchRequest = async <T, U = unknown>(\r",
			"  url: string,\r",
			"  data: U\r",
			"): Promise<T> => {\r",
			"  const response = await api.patch<T>(url, data);\r",
			"  return response.data;\r",
			"};"
		],
		"description": "Realizar um patch com axios"
	},
	"jsa-axios-delete": {
		"prefix": "jsa-axios-delete",
		"body": [
			"export const deleteRequest = async <T>(url: string): Promise<T> => {\r",
			"  const response = await api.delete<T>(url);\r",
			"  return response.data;\r",
			"};"
		],
		"description": "Realizar um delete com axios"
	},
	"jsa-class-ts": {
		"prefix": "jsa-class-ts",
		"body": [
			"export class ${1:Nome} {\r",
			"  private _id: number;\r",
			"  private _name: string;\r",
			"  private _email: string;\r",
			"\r",
			"  isActive: boolean;\r",
			"\r",
			"  constructor(\r",
			"    id: number,\r",
			"    name: string,\r",
			"    email: string,\r",
			"    isActive: boolean = true\r",
			"  ) {\r",
			"    this._id = id;\r",
			"    this._name = name;\r",
			"    this._email = email;\r",
			"    this.isActive = isActive;\r",
			"  }\r",
			"\r",
			"  create(name: string, email: string): void {\r",
			"    this._name = name;\r",
			"    this._email = email;\r",
			"    console.log(`${1:Nome} criado: ${this._name}, ${this._email}`);\r",
			"  }\r",
			"\r",
			"  read(): {\r",
			"    id: number;\r",
			"    name: string;\r",
			"    email: string;\r",
			"    isActive: boolean;\r",
			"  } {\r",
			"    return {\r",
			"      id: this._id,\r",
			"      name: this._name,\r",
			"      email: this._email,\r",
			"      isActive: this.isActive,\r",
			"    };\r",
			"  }\r",
			"\r",
			"  update(data: { name?: string; email?: string }): void {\r",
			"    if (data.name) this._name = data.name;\r",
			"    if (data.email) this._email = data.email;\r",
			"    console.log(`${1:Nome} atualizado: ${this._name}, ${this._email}`);\r",
			"  }\r",
			"\r",
			"  delete(): void {\r",
			"    this.isActive = false;\r",
			"    console.log(`${1:Nome} desativado`);\r",
			"  }\r",
			"\r",
			"  private logInternally(): void {\r",
			"    console.log(`[LOG]: ${1:Nome} ${this._id} acessado internamente`);\r",
			"  }\r",
			"\r",
			"  accessInternalLog(): void {\r",
			"    this.logInternally();\r",
			"  }\r",
			"}"
		],
		"description": "Criar classe usando typescript"
	},
	"jsa-class-abstract-ts": {
		"prefix": "jsa-class-abstract-ts",
		"body": [
			"interface I${1:Nome} {\r",
			"  id: number;\r",
			"  name: string;\r",
			"  email: string;\r",
			"  isActive: boolean;\r",
			"}\r",
			"\r",
			"export class ${1:Nome} implements I${1:Nome}{\r",
			"  private _id: number;\r",
			"  private _name: string;\r",
			"  private _email: string;\r",
			"\r",
			"  isActive: boolean;\r",
			"\r",
			"  constructor(\r",
			"    id: number,\r",
			"    name: string,\r",
			"    email: string,\r",
			"    isActive: boolean = true\r",
			"  ) {\r",
			"    this._id = id;\r",
			"    this._name = name;\r",
			"    this._email = email;\r",
			"    this.isActive = isActive;\r",
			"  }\r",
			"\r",
			"  public get id(): number {\r",
			"    return this._id;\r",
			"  }\r",
			"\r",
			"  public get name(): string {\r",
			"    return this._name;\r",
			"  }\r",
			"\r",
			"  public get email(): string {\r",
			"    return this._email;\r",
			"  }\r",
			"\r",
			"  set name(newName: string) {\r",
			"    if (!newName) throw new Error('Nome inválido');\r",
			"    this._name = newName;\r",
			"  }\r",
			"\r",
			"  set email(newEmail: string) {\r",
			"    if (!newEmail.includes('@')) throw new Error('Email inválido');\r",
			"    this._email = newEmail;\r",
			"  }\r",
			"\r",
			"  create(name: string, email: string): void {\r",
			"    this.name = name;\r",
			"    this.email = email;\r",
			"    this.isActive = true;\r",
			"  }\r",
			"\r",
			"  read(): IUser {\r",
			"    return {\r",
			"      id: this._id,\r",
			"      name: this._name,\r",
			"      email: this._email,\r",
			"      isActive: this.isActive,\r",
			"    };\r",
			"  }\r",
			"\r",
			"  update(data: { name?: string; email?: string }): void {\r",
			"    if (data.name) this.name = data.name;\r",
			"    if (data.email) this.email = data.email;\r",
			"  }\r",
			"\r",
			"  delete(): void {\r",
			"    this.isActive = false;\r",
			"  }\r",
			"\r",
			"  private internalLog(): void {\r",
			"    console.log(`[Interno] Usuário ${this._id} acessado`);\r",
			"  }\r",
			"\r",
			"  accessLog(): void {\r",
			"    this.internalLog();\r",
			"  }\r",
			"\r",
			"  static isValidEmail(email: string): boolean {\r",
			"    return email.includes('@');\r",
			"  }\r",
			"}"
		],
		"description": "Criar uma classe base para ser herdada"
	},
	"jsa-class-extend-ts": {
		"prefix": "jsa-class-extend-ts",
		"body": [
			"export class ${2:Nome} extends ${1:NomeBase} {\r",
			"  private _role: string;\r",
			"\r",
			"  constructor(id: number, name: string, email: string, role: string) {\r",
			"    super(id, name, email);\r",
			"    this._role = role;\r",
			"  }\r",
			"\r",
			"  get role(): string {\r",
			"    return this._role;\r",
			"  }\r",
			"\r",
			"  set role(newRole: string) {\r",
			"    if (!newRole) throw new Error('Função inválida');\r",
			"    this._role = newRole;\r",
			"  }\r",
			"\r",
			"  promote(): void {\r",
			"    console.log(`Admin ${this.name} promovido!`);\r",
			"  }\r",
			"\r",
			"  read(): IUser & { role: string } {\r",
			"    const base = super.read();\r",
			"    return {\r",
			"      ...base,\r",
			"      role: this._role,\r",
			"    };\r",
			"  }\r",
			"}"
		],
		"description": "Criar uma classe que herda de outra"
	},
	"jsa-class-simple-ts": {
		"prefix": "jsa-class-simple-ts",
		"body": [
			"export class ${1:NomeBase} {\r",
			"  private _id: number;\r",
			"  private _name: string;\r",
			"  private _price: number;\r",
			"\r",
			"  constructor(id: number, name: string, price: number) {\r",
			"    this._id = id;\r",
			"    this._name = name;\r",
			"    this._price = price;\r",
			"  }\r",
			"\r",
			"  create(name: string, price: number): void {\r",
			"    this._name = name;\r",
			"    this._price = price;\r",
			"    console.log('${1:NomeBase} criado:', this._name);\r",
			"  }\r",
			"\r",
			"  get(): { id: number; name: string; price: number } {\r",
			"    return {\r",
			"      id: this._id,\r",
			"      name: this._name,\r",
			"      price: this._price,\r",
			"    };\r",
			"  }\r",
			"\r",
			"  update(data: { name?: string; price?: number }): void {\r",
			"    if (data.name) this._name = data.name;\r",
			"    if (data.price !== undefined) this._price = data.price;\r",
			"    console.log('${1:NomeBase} atualizado:', this._name);\r",
			"  }\r",
			"\r",
			"  delete(): void {\r",
			"    this._name = '${1:NomeBase} removido';\r",
			"    this._price = 0;\r",
			"    console.log('${1:NomeBase} deletado.');\r",
			"  }\r",
			"}"
		],
		"description": "Criar uma classe simples em typescript"
	}
}