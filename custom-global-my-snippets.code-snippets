{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"custom-sortarray-javascript": {
		"prefix": "custom-sortarray-javascript",
		"body": [
			"${1:Array}.sort(function (a, b) {\r",
			"    return a === b ? 0 : a ${2:MaiorOuMenor} b ? -1 : 1;\r",
			"});"
		],
		"description": "Ordenar Array, use < ou >"
	},
	"custom-expressionifternario-react": {
		"prefix": "custom-expressionifternario-react",
		"body": "{${1:Condition} ? ${2:ResultTrue} : ${3:ResultFalse}}",
		"description": "Criar if ternário"
	},
	"custom-expressionparenteses-react": {
		"prefix": "custom-expressionparenteses-react",
		"body": [
			"{${1:VariableName} ? (\r",
			"    <${2:ComponentName} />\r",
			"    ) \r",
			"    : \r",
			"    (\r",
			"    <${2:ComponentName} />\r",
			")}"
		],
		"description": "Criar expressão condicional com parenteses"
	},
	"custom-createmap-react": {
		"prefix": "custom-createmap-react",
		"body": [
			"{${1:Array}.map((${2:NameVariable}) => (\r",
			"    <${4:TagName}>{${2:NameVariable}.${3:PropName}}</${4:TagName}>\r",
			"))}"
		],
		"description": "Criar renderização condicional com Map"
	},
	"custom-expression&&-react": {
		"prefix": "custom-expression&&-react",
		"body": [
			"{!${1:NameVariable} && (\r",
			"    <${2:TagName}>\r",
			"        \r",
			"    </${2:TagName}>\r",
			")}"
		],
		"description": "Criar expressão lógica com &&"
	},
	"custom-component-arrowfunction": {
		"prefix": "custom-component-arrowfunction",
		"body": [
			"interface ${1:Name} {\r",
			"\r",
			"};\r",
			"\r",
			"type ${1:Name}Props = {\r",
			"\r",
			"};\r",
			"\r",
			"const ${1:Name} = () => {\r",
			"    return (\r",
			"        <div></div>\r",
			"    )\r",
			"};",
			"\r",
			"export default ${1:Name};"
		],
		"description": "Cria componente usando arrow funtion e tipagem"
	},
	"custom-component-function": {
		"prefix": "custom-component-function",
		"body": [
			"interface ${1:Name} {\r",
			"\r",
			"};\r",
			"\r",
			"type ${1:Name}Props = {\r",
			"\r",
			"};\r",
			"\r",
			"export default function ${1:Name}() {\r",
			"    return (\r",
			"        <div></div>\r",
			"    )\r",
			"};"
		],
		"description": "Cria um componente react com tipagem"
	},
	"custom-root-layout": {
		"prefix": "custom-root-layout",
		"body": [
			"import type { Metadata } from \"next\";\r",
			"import { Inter } from \"next/font/google\";\r",
			"import \"./globals.css\";\r",
			"\r",
			"const inter = Inter({ subsets: [\"latin\"] });\r",
			"\r",
			"export const metadata: Metadata = {\r",
			"  title: \"Create Next App\",\r",
			"  description: \"Generated by create next app\",\r",
			"};\r",
			"\r",
			"export default function ${1:Name}Layout({\r",
			"  children,\r",
			"}: Readonly<{\r",
			"  children: React.ReactNode;\r",
			"}>) {\r",
			"  return (\r",
			"    <html lang=\"pt-Br\">\r",
			"      <body>{children}</body>\r",
			"    </html>\r",
			"  );\r",
			"}"
		],
		"description": "Criaçao de root layout aplicativo Next"
	},
	"custom-styled-components": {
		"prefix": "custom-styled-components",
		"body": [
			"export const ${1:NameComponents} = styled.${2:Tag}`\r",
			"    ${3:Estilo}\r",
			"`;"
		],
		"description": "Criar um estilo via styled components"
	},
	"custom-media-querie": {
		"prefix": "custom-media-querie",
		"body": [
			"@media(min-width: ${1:Size}px) and (max-width: ${2:Size}px){\r",
			"            ${3:Property}\r",
			"}"
		],
		"description": "Criar uma media querie"
	},
	"custom-useeffect-react": {
		"prefix": "custom-useeffect-react",
		"body": [
			"useEffect(() => {\r",
			"        console.log(\"Hello world\");\r",
			"        return () => {\r",
			"            console.clear();\r",
			"        };\r",
			"    }, []);"
		],
		"description": "Criar um use effect em react"
	}
}
